check()
library(devtools)
check()
check()
check()
check()
check()
use_mit_license("Adeel Khan")
library(available)
available("doofus")
install.packages("available")
library(available)
available("doofus")
available("noaaquake")
library(noaaquake)
devtools::document()
devtools::document()
devtools::document()
library(noaaquake)
devtools::document()
library(noaaquake)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
library(noaaquake)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
library(noaaquake)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
data <- read.delim("C:/MOOC/Building_R_Packages/capstone_data_science/Data/earthquakes-2021-05-16_23-42-17_+0530.tsv")
NOAA_data <- read.delim("C:/MOOC/Building_R_Packages/capstone_data_science/Data/earthquakes-2021-05-16_23-42-17_+0530.tsv")
devtools::use_data(NOAA_data)
View(data)
x <- c(1:10)
devtools::use_data(x)
devtools::use_data(NOAA_data)
usethis::use_data(NOAA_data)
NOAA_data
dim(NOAA_data)
usethis::use_data(NOAA_data)
devtools::document()
NOAA_data
?eq_clean_data
usethis::use_data(NOAA_data)
library(noaaquake)
devtools::document()
rm(list = c("NOAA_data"))
devtools::document()
NOAA_data <- read.delim("inst/extdata/earthquakes-2021-05-16_23-42-17_+0530.tsv")
usethis::use_data(NOAA_data)
devtools::document()
load_add()
load_all()
devtools::document()
devtools::document()
devtools::document()
data("NOAA_data")
a <- data("NOAA_data")
a <- data(NOAA_data)
a
devtools::document()
library(noaaquake)
devtools::document()
devtools::document()
?eq_clean_data
data(NOAA_data)
eq_clean_data(NOAA_data)
library(noaaquake)
data(NOAA_data)
eq_clean_data(NOAA_data)
#' @title ggproto timeline object of class ggproto
#'
#' @description This is the setup required for creating a new geom class. This GeomTimeLine
#'     inherits from a top level class called Geom.It creates a geom that draws the
#'     timeline for a specified date interval and put points on it for each earthquake.
#'
#' @export
GeomTimeline <- ggplot2::ggproto("GeomTimeline", ggplot2::Geom,
required_aes = c("x"),
non_missing_aes = c("size", "shape", "colour"),
default_aes = ggplot2::aes(
y = 0.25, shape = 19, colour = "black", size = 1.25, fill = 'black',
alpha = NA, stroke = 0.5
),
extra_params = c("na.rm", "xmin", "xmax"),
setup_data = function(data, params) {
data <- data %>%
dplyr::filter(dplyr::between(x, params$xmin, params$xmax))
},
draw_panel = function(data, panel_params, coord, na.rm = FALSE) {
coords <- coord$transform(data, panel_params)
grid::pointsGrob(
coords$x, coords$y,
pch = coords$shape,
gp = grid::gpar(
col = ggplot2::alpha(coords$colour, coords$alpha),
fill = ggplot2::alpha(coords$fill, coords$alpha),
# Stroke is added around the outside of the point
fontsize = coords$size * ggplot2::.pt + coords$stroke * ggplot2::.stroke / 2,
lwd = coords$stroke * ggplot2::.stroke / 2
)
)
},
draw_key = ggplot2::draw_key_point
)
#' @title Geom function for creating the timeline from Earthquake data from NOAA
#'
#' @param mapping set aesthetics
#' @param data The data of which we want to make the timeline
#' @param stat The statistics that you want to use
#' @param position Position of the string
#' @param na.rm If False, null value are removed
#' @param show.legend Should layer have a legend or not
#' @param inherit.aes Basically inherit the aesthetics or not
#' @param xmin Providing the minimum date for the data to be plotted
#' @param xmax Providing maximum date for the data to be plotted
#' @param ... Other arguments that can be passed
#'
#' @return
#' @export
#'
#' @examples
#' data(NOAA_data)
#' NOAA_data %>% eq_clean_data() %>% dplyr::filter(Country %in% c("India", "Pakistan")) %>%
#' ggplot(aes(x = date, y = Country, color = Total.Deaths, size = Mag,
#' magnitude = Mag, label =Location_Name)) +
#' labs(color="#deaths",size="Magnitude",x="DATE")+
#' geom_timeline(alpha=0.2,xmin = ymd('2000-01-01'), xmax = ymd('2015-12-31'))+
#' labs(x="DATE")+theme_minimal()
geom_timeline <- function(mapping = NULL, data = NULL, stat = "identity",
position = "identity", na.rm = FALSE,
show.legend = NA, inherit.aes = TRUE,
xmin = as.Date('0001-01-01'), xmax = as.Date('2020-01-01'), ...) {
ggplot2::layer(
geom = GeomTimeline, mapping = mapping,
data = data, stat = stat, position = position,
show.legend = show.legend, inherit.aes = inherit.aes,
params = list(na.rm = na.rm, xmin = xmin, xmax = xmax, ...)
)
}
NOAA_data %>% eq_clean_data() %>% dplyr::filter(Country %in% c("India", "Pakistan")) %>%
ggplot(aes(x = date, y = Country, color = Total.Deaths, size = Mag,
magnitude = Mag, label =Location_Name)) +
labs(color="#deaths",size="Magnitude",x="DATE")+
geom_timeline(alpha=0.2,xmin = ymd('2000-01-01'), xmax = ymd('2015-12-31'))+
labs(x="DATE")+theme_minimal()
library(magrittr)
NOAA_data %>% eq_clean_data() %>% dplyr::filter(Country %in% c("India", "Pakistan")) %>%
ggplot(aes(x = date, y = Country, color = Total.Deaths, size = Mag,
magnitude = Mag, label =Location_Name)) +
labs(color="#deaths",size="Magnitude",x="DATE")+
geom_timeline(alpha=0.2,xmin = ymd('2000-01-01'), xmax = ymd('2015-12-31'))+
labs(x="DATE")+theme_minimal()
library(ggplot2)
NOAA_data %>% eq_clean_data() %>% dplyr::filter(Country %in% c("India", "Pakistan")) %>%
ggplot(aes(x = date, y = Country, color = Total.Deaths, size = Mag,
magnitude = Mag, label =Location_Name)) +
labs(color="#deaths",size="Magnitude",x="DATE")+
geom_timeline(alpha=0.2,xmin = ymd('2000-01-01'), xmax = ymd('2015-12-31'))+
labs(x="DATE")+theme_minimal()
library(lubridate)
library(grid)
NOAA_data %>% eq_clean_data() %>% dplyr::filter(Country %in% c("India", "Pakistan")) %>%
ggplot(aes(x = date, y = Country, color = Total.Deaths, size = Mag,
magnitude = Mag, label =Location_Name)) +
labs(color="#deaths",size="Magnitude",x="DATE")+
geom_timeline(alpha=0.2,xmin = ymd('2000-01-01'), xmax = ymd('2015-12-31'))+
labs(x="DATE")+theme_minimal()
devtools::document()
library(noaaquake)
library(noaaquake)
library(noaaquake)
devtools::document()
NOAA_data %>% eq_clean_data() %>%
dplyr::filter(Country %in% c("India", "Pakistan")) %>%
ggplot(aes(x = date, y = Country, color = Total.Deaths, size = Mag,
magnitude = Mag, label =Location_Name)) +
labs(color="#deaths",size="Magnitude",x="DATE")+
geom_timeline(alpha=0.2,xmin = ymd('2000-01-01'), xmax = ymd('2015-12-31'))+
labs(x="DATE")+theme_minimal()
devtools::document()
library(noaaquake)
library(namespace)
?geom_timeline
devtools::document()
devtools::document()
library(noaaquake)
library(noaaquake)
devtools::document()
library(noaaquake)
NOAA_data %>%
eq_clean_data()%>%
dplyr::filter(Country == "India"|Country == "Pakistan" & lubridate::year(date) >= 2000)
eq_map(data = data_clean, annot_col = "date")
eq_map <- function(data, annot_col) {
# note that annot_col in a character string
leaflet::leaflet() %>%
leaflet::addTiles() %>%
leaflet::addCircleMarkers(data = data, radius = ~ Mag*1.5,opacity = 0.5,weight = 5,
lng = ~ Longitude, lat = ~ Latitude,
popup = ~ data[[annot_col]])
}
NOAA_data %>%
eq_clean_data()%>%
dplyr::filter(Country == "India"|Country == "Pakistan" & lubridate::year(date) >= 2000)
eq_map(data = data_clean, annot_col = "date")
data_clean <- NOAA_data %>%
eq_clean_data()%>%
dplyr::filter(Country == "India"|Country == "Pakistan" & lubridate::year(date) >= 2000)
eq_map(data = data_clean, annot_col = "date")
head(data_clean)
eq_map(data = data_clean, annot_col = "Total.Deaths")
eq_map(data = data_clean, annot_col = "Location_Name")
eq_map(data = data_clean, annot_col = c("Location_Name","date"))
eq_map(data = data_clean, annot_col = c("Location_Name"))
eq_map(data = data_clean, annot_col = "Mag")
head(data_clean$Mag)
eq_map(data = NOAA_data, annot_col = "popup_text")
eq_create_label <- function(data) {
labelled_data <- data %>%
dplyr::mutate(popup_text = paste("<b>Location:</b>", Location, "<br />",
"<b>Magnitude:</b>", Mag, "<br />",
"<b>Total Deaths:</b>", Deaths, "<br />"),
popup_text = ifelse(is.na(Location) | is.na(Mag) | is.na(Deaths),
paste("<b>No Data Available</b>"), popup_text))
labelled_data$popup_text
}
test <-eq_create_label(data_clean)
NOAA_data %>%
eq_clean_data()
eq_create_label <- function(data) {
labelled_data <- data %>%
dplyr::mutate(popup_text = paste("<b>Location:</b>", Location_Name, "<br />",
"<b>Magnitude:</b>", Mag, "<br />",
"<b>Total Deaths:</b>", Deaths, "<br />"),
popup_text = ifelse(is.na(Location) | is.na(Mag) | is.na(Deaths),
paste("<b>No Data Available</b>"), popup_text))
labelled_data$popup_text
}
test <-eq_create_label(data_clean)
NOAA_data %>%
eq_clean_data()
eq_create_label <- function(data) {
labelled_data <- data %>%
dplyr::mutate(popup_text = paste("<b>Location:</b>", Location_Name, "<br />",
"<b>Magnitude:</b>", Mag, "<br />",
"<b>Total Deaths:</b>", Deaths, "<br />"),
popup_text = ifelse(is.na(Location_Name) | is.na(Mag) | is.na(Deaths),
paste("<b>No Data Available</b>"), popup_text))
labelled_data$popup_text
}
test <-eq_create_label(data_clean)
test
eq_map(data = data_clean, annot_col = test)
data_clean <- NOAA_data %>%
eq_clean_data()%>%
dplyr::filter(Country == "India"|Country == "Pakistan" & lubridate::year(date) >= 2000)%>%
dplyr::mutate(popup_text = eq_create_label(.))
eq_map(data = data_clean, annot_col = "popup_text")
devtools::document()
devtools::document()
devtools::document()
load_all()
devtools::document()
devtools::document()
library(noaaquake)
?eq_map
library(noaaquake)
library(noaaquake)
file.exists("~/.ssh/id_rsa.pub")
